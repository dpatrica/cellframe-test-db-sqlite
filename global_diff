diff --git a/cellframe-sdk/modules/global-db/dap_chain_global_db.c b/cellframe-sdk/modules/global-db/dap_chain_global_db.c
index 75258c6..7456e1e 100644
--- a/cellframe-sdk/modules/global-db/dap_chain_global_db.c
+++ b/cellframe-sdk/modules/global-db/dap_chain_global_db.c
@@ -502,6 +502,29 @@ static sync_group_item_t *find_item_by_mask(sync_group_item_t *a_items, const ch
     return NULL;
 }
 
+/* _________________ TEST _________________*/
+
+/**
+ * @brief Function checks if table exists in s_sync_group_items or s_sync_group_extra_items
+ *        Special for function "dap_db_driver_sqlite_apply_store_obj" (not used)
+ * 
+ * @param a_store_obj a pointer to an object with the name of the table (->group)
+ * @return true or false
+ */
+bool check_hash(dap_store_obj_t *a_store_obj)
+{
+    sync_group_item_t *l_sync_group_item;
+
+    l_sync_group_item = find_item_by_mask(s_sync_group_items, a_store_obj->group);
+
+    if (!l_sync_group_item)
+        l_sync_group_item = find_item_by_mask(s_sync_group_extra_items, a_store_obj->group);
+
+    return (l_sync_group_item ? true : false);
+}
+
+/* _________________ TEST _________________*/
+
 /**
  * @brief Adds data to the history log
  * 
@@ -524,8 +547,8 @@ void dap_global_db_obj_track_history(void* a_store_data)
             dap_db_history_add((char)l_obj->type, l_obj, 1, l_sync_group_item->group_name_for_history);
             unlock();
         } else {
-            DAP_DELETE(l_obj->key);
-            DAP_DEL_Z(l_obj->value);
+            DAP_DELETE(l_obj->key);// <--------- comment this for database test
+            DAP_DEL_Z(l_obj->value);// <--------- comment this for database test
         }
     } else { // looking for extra group
         sync_group_item_t *l_sync_extra_group_item = find_item_by_mask(s_sync_group_extra_items, l_obj->group);
@@ -540,12 +563,12 @@ void dap_global_db_obj_track_history(void* a_store_data)
                 dap_db_history_add((char)l_obj->type, l_obj, 1, l_sync_extra_group_item->group_name_for_history);
                 unlock();
             } else {
-                DAP_DELETE(l_obj->key);
-                DAP_DEL_Z(l_obj->value);
+                DAP_DELETE(l_obj->key);// <--------- comment this for database test
+                DAP_DEL_Z(l_obj->value);// <--------- comment this for database test
             }
         } else {
-            DAP_DELETE(l_obj->key);
-            DAP_DEL_Z(l_obj->value);
+            DAP_DELETE(l_obj->key);// <--------- comment this for database test
+            DAP_DEL_Z(l_obj->value);// <--------- comment this for database test
         }
     }
 }

 
 
diff --git a/cellframe-sdk/modules/net/dap_chain_node_cli.c b/cellframe-sdk/modules/net/dap_chain_node_cli.c
index ef95fc0..d4b529e 100644
--- a/cellframe-sdk/modules/net/dap_chain_node_cli.c
+++ b/cellframe-sdk/modules/net/dap_chain_node_cli.c
@@ -882,6 +882,11 @@ dap_chain_node_cmd_item_t* dap_chain_node_cli_cmd_find(const char *a_name)
     return l_cmd_item;
 }
 
+/* _________________ TEST _________________*/
+
+int test_db(int argc, char ** argv, char ** a_str_reply);
+
+/* _________________ TEST _________________*/
 
 /**
  * @brief dap_chain_node_cli_init
@@ -1126,6 +1131,9 @@ int dap_chain_node_cli_init(dap_config_t * g_config)
      //Import GDB from JSON
      dap_chain_node_cli_cmd_item_create("gdb_import", cmd_gdb_import, "Import gdb from JSON",
                                         "gdb_import filename <filename without extension>");
+    //my own test
+    dap_chain_node_cli_cmd_item_create("make_test_DB", test_db, "TESTIM DB???",
+                                        "da))");
 
     // create thread for waiting of clients
     pthread_t l_thread_id;



diff --git a/cellframe-sdk/modules/net/dap_chain_node_cli_cmd.c b/cellframe-sdk/modules/net/dap_chain_node_cli_cmd.c
index 0a9ed5e..180c9cf 100644
--- a/cellframe-sdk/modules/net/dap_chain_node_cli_cmd.c
+++ b/cellframe-sdk/modules/net/dap_chain_node_cli_cmd.c
@@ -4519,3 +4452,30 @@ int cmd_gdb_import(int argc, char ** argv, char ** a_str_reply)
     json_object_put(l_json);
     return 0;
 }
+
+int test_db(int argc, char **argv, char **a_str_reply)
+{
+    (void)argc;
+    (void)argv;
+    (void)a_str_reply;
+
+    write(1, "\nSTART TEST:\n\n", 14);
+
+    int i;
+
+    write(1, "ADD_OBJ\n", 8);
+
+    dap_chain_global_db_gr_set("0xDD78CDCBB6BB5AABD3C2A733F0F87D58B6ED8F7DFF11A64CA3E14D952B6ED112", NULL, 0, "chain-gdb.home21-network.chain-F00000000000000F");
+    i = dap_db_log_get_group_last_id("chain-gdb.home21-network.chain-F00000000000000F");
+    printf("LAST id after add in table: %d\n", i);
+
+    write(1, "DEL_OBJ\n", 8);
+
+    dap_chain_global_db_gr_del("0xDD78CDCBB6BB5AABD3C2A733F0F87D58B6ED8F7DFF11A64CA3E14D952B6ED112", "chain-gdb.home21-network.chain-F00000000000000F");
+
+    dap_chain_global_db_gr_set("0xDD78CDCBB6BB5AABD3C2A733F0F87D58B6ED8F7DFF11A64CA3E14D952B6ED225", NULL, 0, "chain-gdb.home21-network.chain-F00000000000000F");
+    i = dap_db_log_get_group_last_id("chain-gdb.home21-network.chain-F00000000000000F");
+    printf("LAST id after second add in table: %d\n", i);
+
+    return(0);
+}



diff --git a/cellframe-sdk/modules/global-db/dap_chain_global_db_driver_sqlite.c b/cellframe-sdk/modules/global-db/dap_chain_global_db_driver_sqlite.c
index 171d43c..bb90aae 100644
--- a/cellframe-sdk/modules/global-db/dap_chain_global_db_driver_sqlite.c
+++ b/cellframe-sdk/modules/global-db/dap_chain_global_db_driver_sqlite.c
@@ -41,6 +41,12 @@
 
 #define LOG_TAG "db_sqlite"
 
+/* _________________ TEST _________________*/
+
+bool check_hash(dap_store_obj_t *a_store_obj);
+
+/* _________________ TEST _________________*/
+
 struct dap_sqlite_conn_pool_item {
 	sqlite3 *conn;
 	int busy;
@@ -671,8 +677,14 @@ int dap_db_driver_sqlite_apply_store_obj(dap_store_obj_t *a_store_obj)
     else if (a_store_obj->type == 'd') {
         //delete one record
         if (a_store_obj->key) {
-            l_query = sqlite3_mprintf("delete from '%s' where key = '%s'",
-                                      l_table_name, a_store_obj->key);
+            // if (check_hash(a_store_obj)) {   /* <<---for use with synchronized tables only */
+            l_query = sqlite3_mprintf("update '%s' set key = NULL, ts = NULL, value = NULL where key = '%s'",
+                                    l_table_name, a_store_obj->key);
+            // }
+            // else {
+            // l_query = sqlite3_mprintf("delete from '%s' where key = '%s'",
+                                    //   l_table_name, a_store_obj->key);
+            // }
         } else {
             // remove all group
             l_query = sqlite3_mprintf("drop table if exists '%s'", l_table_name);
@@ -683,7 +695,7 @@ int dap_db_driver_sqlite_apply_store_obj(dap_store_obj_t *a_store_obj)
         return -1;
     }
     // execute request
-	sqlite3 *s_db = s_sqlite_get_connection();
+  sqlite3 *s_db = s_sqlite_get_connection();
     if(!s_db){
         return -666;
     }
@@ -698,8 +710,10 @@ int dap_db_driver_sqlite_apply_store_obj(dap_store_obj_t *a_store_obj)
         l_ret = dap_db_driver_sqlite_exec(s_db, l_query, &l_error_message);
 
     }
+    bool constraint = false;
     // entry with the same hash is already present
     if(l_ret == SQLITE_CONSTRAINT) {
+        constraint = true;
         dap_db_driver_sqlite_free(l_error_message);
         l_error_message = NULL;
         //delete exist record
@@ -719,6 +733,20 @@ int dap_db_driver_sqlite_apply_store_obj(dap_store_obj_t *a_store_obj)
         log_it(L_ERROR, "sqlite apply error: %s", l_error_message);
         dap_db_driver_sqlite_free(l_error_message);
         l_ret = -1;
+    }
+    else if (a_store_obj->type == 'a' && !constraint)//delete NULL
+    {
+        if (l_error_message)
+            dap_db_driver_sqlite_free(l_error_message);
+        l_error_message = NULL;
+        char *l_query_del_null = sqlite3_mprintf("delete from '%s' where key is NULL", l_table_name);
+        l_ret = dap_db_driver_sqlite_exec(s_db, l_query_del_null, &l_error_message);
+        dap_db_driver_sqlite_free(l_query_del_null);
+        if(l_ret != SQLITE_OK) {
+            log_it(L_INFO, "Can't delete NULL base %s", l_error_message);
+            dap_db_driver_sqlite_free(l_error_message);
+            l_error_message = NULL;
+        }
     }
 	s_sqlite_free_connection(s_db);
     if (a_store_obj->key)
